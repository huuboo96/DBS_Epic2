AWSTemplateFormatVersion: '2010-09-09'

Description: >
    AWS Cloud Formation Lambda Template: Resources:
    - AWS EC2 Instance with Amazon Linux AMI, 
    - AWS Security Group, 
    - Amazon S3 Bucket,
    - Lambda Function with Python Code 
    GitHub Repository:
    https://github.com/huuboo96/DBS_Epic2/tree/DBS_Epic2_Task1
   
Parameters:

  ImageId:
    Type: String
    Description: 'Linux 2 AMI for eu-central-1 Region'
    Default: {{ ami_id|default("ami-05f5f4f906feab6a7", true) }}
  AvailabilityZone:
    Type: String
    Description: Availability Zone into which instance will launch
    Default: {{ availability_zone|default("eu-central-1a", true) }}
  InstanceType:
    Type: String
    Description: Choosing  t2 micro because it is free
    Default: {{ instance_type|default("t2.micro", true) }}
  KeyName:
    Description: SSH Keypair to login to the instance
    Type: String #AWS::EC2::KeyPair::KeyName
    Default: {{ ssh_key_name|default("aws-rsa", true) }}
  BucketName:
    Type: String
    Description: Name of  bucket
    Default: {{ bucket_name|default("s3-bucket-hkozu", true) }}

Resources:

  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketName

  InstanceKeyPair:
    Type: 'AWS::EC2::KeyPair'
    Properties:
      KeyName: !Ref KeyName

  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: "vpc-0758469e3cb08040d"
      CidrBlock: 172.31.48.0/20
      AvailabilityZone: "eu-central-1a"

  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties: 
      VpcId: "vpc-0758469e3cb08040d"
      
  SSHInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
         Ref: NetworkAcl
       RuleNumber: 100
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 22
         To: 22
  S3InboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
         Ref: NetworkAcl
       RuleNumber: 101
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 1024 # port range from docs for s3 buckt connection
         To: 65535
  OutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
         Ref: NetworkAcl
       RuleNumber: 100
       Protocol: -1
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
  
  SubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: Subnet
      NetworkAclId:
        Ref: NetworkAcl

  Instance:
    Type: 'AWS::EC2::Instance'
    Properties: 
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      AvailabilityZone: !Ref AvailabilityZone
      KeyName: !Ref KeyName
      #SecurityGroupIds: 
      #  - !Ref SecurityGroup
      IamInstanceProfile: !Ref InstanceProfile
      NetworkInterfaces: 
      - AssociatePublicIpAddress: "true"
        DeviceIndex: "0"
        GroupSet: 
          - !GetAtt SecurityGroup.GroupId
        SubnetId: 
          Ref: "Subnet"

  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SG to allow SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: Name
          Value: SSH-SG

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: -ec2-instance-profile
      Path: /
      Roles: 
       - !Ref Ec2InstanceRole

  Ec2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: -ec2-instance-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: S3GetObjectPolicy
        PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:GetObjectVersion
                  Resource:
                    - !Sub 'arn:aws:s3:::${BucketName}/*'
      - PolicyName: S3ListPolicy
        PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                    - s3:ListAllMyBuckets
                  Resource: "*"

Outputs:
  KeyPairId:
    Description: Instance KeyPair Id
    Value: !GetAtt InstanceKeyPair.KeyPairId
  
  InstanceDnsName:
    Description: Instance Public DNS name
    Value: !GetAtt Instance.PublicDnsName

  InstanceId:
    Description: Instance Id 
    Value: !Ref Instance