AWSTemplateFormatVersion: '2010-09-09'
Description: "AWS Cloud Formation Lambda Template: Resources: - AWS EC2 Instance with\
  \ Amazon Linux AMI,  - AWS Security Group,  - Amazon S3 Bucket, - Lambda Function\
  \ with Python Code  GitHub Repository: https://github.com/huuboo96/DBS_Epic2/tree/DBS_Epic2_Task1\n"
Parameters:
  TagKey:
    Description: The EC2 tag key that identifies this as a target for deployments.
    Type: String
    Default: Name
    AllowedPattern: '[\x20-\x7E]*'
    ConstraintDescription: Can contain only ASCII characters.
  TagValue:
    Description: The EC2 tag value that identifies this as a target for deployments.
    Type: String
    Default: EC2WebServer
    AllowedPattern: '[\x20-\x7E]*'
    ConstraintDescription: Can contain only ASCII characters.
  KeyPairName:
    Description: Name of an existing Amazon EC2 key pair to enable SSH or RDP access
      to the instances.
    Type: String
    Default: Azkaban
    MinLength: '1'
    MaxLength: '255'
    AllowedPattern: '[\x20-\x7E]*'
    ConstraintDescription: KeyPairName is a required Field and can contain only ASCII
      characters.
  InstanceType:
    Description: Amazon EC2 instance type.
    Type: String
    Default: t2.micro
    ConstraintDescription: Must be a valid Amazon EC2 instance type.
  OperatingSystem:
    Description: Amazon EC2 operating system type (Linux or Windows).
    Type: String
    Default: Linux
    ConstraintDescription: Must be Windows or Linux.
    AllowedValues:
    - Linux
    - Windows
  SSHLocation:
    Description: The IP address range that can be used to connect using SSH or RDP
      to the Amazon EC2 instances.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
  AvailabilityZone:
    Description: An Availability Zone.
    Type: String
    Default: eu-central-1c
    ConstraintDescription: Must be a valid Availability Zone
  BucketName:
    Type: String
    Description: Name of S3 bucket
    Default: aws-s3-bucket-hkozu
  LambdaFunctionName:
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9_-]*'
    Description: The name of the Lambda function to be deployed
    Default: Lambda-DynamoDB-Function
  LambdaRoleName:
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[\w+=,.@-]+'
    Description: The name of the IAM role used as the Lambda execution role
    Default: Lambda-Role
  LambdaPolicyName:
    Type: String
    MinLength: '1'
    MaxLength: '128'
    AllowedPattern: '[\w+=,.@-]+'
    Default: Lambda-Policy
  DynamoDBTableName:
    Type: String
    MinLength: '3'
    MaxLength: '255'
    AllowedPattern: '[a-zA-Z0-9_.-]+'
    Description: The name of the DynamoDB table to be deployed
    Default: DynamoDB-Table
  DynamoDBPKName:
    Type: String
    MinLength: '1'
    MaxLength: '255'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9_-]*'
    Description: The name of the primary key that will exist in the DynamoDB table
    Default: itemId
Mappings:
  RegionOS2AMI:
    eu-central-1:
      HVM64: ami-0474863011a7d1541
      HVMG2: ami-0aa1822e3eb913a11
  OS2SSHPort:
    Linux:
      SSHPort: '22'
    Windows:
      SSHPort: '3389'
Resources:
  LinuxEC2Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        services:
          sysvint:
            codedeploy-agent:
              enabled: 'true'
              ensureRunning: 'true'
    Properties:
      ImageId:
        Fn::FindInMap:
        - RegionOS2AMI
        - Ref: AWS::Region
        - HVM64
      InstanceType:
        Ref: InstanceType
      SecurityGroups:
      - Ref: SecurityGroup
      KeyName:
        Ref: KeyPairName
      Tags:
      - Key:
          Ref: TagKey
        Value:
          Ref: TagValue
      IamInstanceProfile:
        Ref: InstanceRoleInstanceProfile
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80 and SSH access.
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort:
          Fn::FindInMap:
          - OS2SSHPort
          - Ref: OperatingSystem
          - SSHPort
        ToPort:
          Fn::FindInMap:
          - OS2SSHPort
          - Ref: OperatingSystem
          - SSHPort
        CidrIp:
          Ref: SSHLocation
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
  InstanceRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: InstanceRole
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - cloudformation:Describe*
          - cloudformation:GetTemplate
          - s3:Get*
          Resource: '*'
      Roles:
      - Ref: InstanceRole
  InstanceRoleInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - Ref: InstanceRole
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      BucketName:
        Ref: BucketName
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: LambdaFunctionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - '*'
            Resource: '*'
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Adds a random string value to the specified DynamoDB table
      FunctionName:
        Ref: LambdaFunctionName
      Handler: index.lambda_handler
      MemorySize: 128
      Runtime: python3.8
      Role:
        Fn::GetAtt:
        - LambdaRole
        - Arn
      Timeout: 240
      Environment:
        Variables:
          TableName:
            Ref: DynamoDBTableName
          KeyName:
            Ref: DynamoDBPKName
      Code:
        ZipFile: "# Imports\nimport os\nimport boto3\nimport botocore\nimport logging\n\
          import random\nimport string\n# Set up clients and resources\nddbclient\
          \ = boto3.client('dynamodb')\n# Set up the logger\nlogger = logging.getLogger()\n\
          logger.setLevel(logging.INFO)\n#logger.setLevel(logging.DEBUG) # Very verbose\n\
          # Env variables from CFN\ntablename = os.environ.get('TableName')\nkeyname\
          \ = os.environ.get('KeyName')\ndef lambda_handler(event, context):\n   \
          \ # Generate a random string to ensure no duplicates are put into DDB table\n\
          \    randomstring = (''.join(random.choice(string.ascii_letters) for i in\
          \ range(10)))\n    logger.info('Random string generated: %s', randomstring)\n\
          \    \n    def ddb_client(tablename, keyname, stringdata):\n        response\
          \ = ddbclient.put_item(\n        Item={\n            keyname: {\n      \
          \          'S': stringdata\n            }\n        },\n        ReturnConsumedCapacity='TOTAL',\n\
          \        TableName=tablename\n        )\n        return(response)\n    \n\
          \    try:    \n        ddb_response = ddb_client(tablename, keyname, randomstring)\n\
          \        logger.info(ddb_response)\n    except botocore.exceptions.ClientError\
          \ as error:\n        # Put your error handling logic here\n        raise\
          \ error\n        \n    return(ddb_response)\n"
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Ref: LambdaRoleName
      Description: An execution role for a Lambda function launched by CloudFormation
      ManagedPolicyArns:
      - Ref: LambdaPolicy
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action:
          - sts:AssumeRole
  LambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName:
        Ref: LambdaPolicyName
      Description: Managed policy for a Lambda function launched by CloudFormation
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - dynamodb:PutItem
          Resource:
            Fn::Sub: arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTable}
        - Effect: Allow
          Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
            Fn::Join:
            - ''
            - - 'arn:'
              - Ref: AWS::Partition
              - ':logs:'
              - Ref: AWS::Region
              - ':'
              - Ref: AWS::AccountId
              - :log-group:/aws/lambda/
              - Ref: LambdaFunctionName
              - :*
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          Resource:
            Fn::Sub: arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Join:
        - ''
        - - /aws/lambda/
          - Ref: LambdaFunctionName
      RetentionInDays: 30
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName:
          Ref: DynamoDBPKName
        AttributeType: S
      BillingMode: PROVISIONED
      KeySchema:
      - AttributeName:
          Ref: DynamoDBPKName
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName:
        Ref: DynamoDBTableName
Outputs:
  CLI:
    Description: Use this command to invoke the Lambda function
    Value:
      Fn::Sub: "aws lambda invoke --function-name ${LambdaFunction} --payload '{\"\
        null\": \"null\"}' lambda-output.txt --cli-binary-format raw-in-base64-out"
